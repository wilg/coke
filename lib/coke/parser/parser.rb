#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


module Coke
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 177)
  # This code will be put as-is in the Parser class.
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code) # Tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # Kickoff the parsing process
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    26,    14,    24,    25,    14,    16,    17,    18,    19,    20,
    22,    23,    26,    72,    24,    25,    72,    16,    17,    18,
    19,    20,    22,    23,    76,    44,    89,    43,    88,    14,
    15,    13,    71,    15,    21,    29,    51,    85,    90,    49,
    75,    47,    79,    13,    96,    26,    21,    24,    25,    46,
    16,    17,    18,    19,    20,    22,    23,    26,    15,    24,
    25,    14,    16,    17,    18,    19,    20,    22,    23,    29,
    45,    82,    40,    41,    72,    26,    13,    24,    25,    21,
    16,    17,    18,    19,    20,    22,    23,    95,    13,    27,
    15,    21,    26,    29,    24,    25,   nil,    16,    17,    18,
    19,    20,    22,    23,   nil,   nil,    13,    67,    26,    21,
    24,    25,   nil,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,    26,    13,    24,    25,    21,    16,    17,    18,
    19,    20,    22,    23,   nil,   nil,   nil,    67,    26,    13,
    24,    25,    21,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,    26,    13,    24,    25,    21,    16,    17,    18,
    19,    20,    22,    23,   nil,   nil,   nil,   nil,    79,    13,
    91,    26,    21,    24,    25,   nil,    16,    17,    18,    19,
    20,    22,    23,    13,   nil,    26,    21,    24,    25,   nil,
    16,    17,    18,    19,    20,    22,    23,   nil,   nil,   nil,
   nil,    79,    13,    77,    26,    21,    24,    25,   nil,    16,
    17,    18,    19,    20,    22,    23,    13,   nil,    26,    21,
    24,    25,   nil,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,   nil,   nil,    26,    13,    24,    25,    21,    16,
    17,    18,    19,    20,    22,    23,   nil,   nil,    26,    13,
    24,    25,    21,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,   nil,   nil,    26,    13,    24,    25,    21,    16,
    17,    18,    19,    20,    22,    23,   nil,   nil,    26,    13,
    24,    25,    21,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,   nil,   nil,    26,    13,    24,    25,    21,    16,
    17,    18,    19,    20,    22,    23,   nil,   nil,    26,    13,
    24,    25,    21,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,   nil,   nil,    26,    13,    24,    25,    21,    16,
    17,    18,    19,    20,    22,    23,   nil,   nil,    26,    13,
    24,    25,    21,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,   nil,   nil,    26,    13,    24,    25,    21,    16,
    17,    18,    19,    20,    22,    23,   nil,   nil,    26,    13,
    24,    25,    21,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,   nil,   nil,    26,    13,    24,    25,    21,    16,
    17,    18,    19,    20,    22,    23,   nil,   nil,    26,    13,
    24,    25,    21,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,   nil,   nil,    26,    13,    24,    25,    21,    16,
    17,    18,    19,    20,    22,    23,   nil,   nil,    26,    13,
    24,    25,    21,    16,    17,    18,    19,    20,    22,    23,
   nil,   nil,   nil,    67,   nil,    13,    29,   nil,    21,    40,
    41,    38,    39,    34,    35,    36,    37,    32,    33,    13,
    29,   nil,    21,    40,    41,    38,    39,    34,    35,    36,
    37,    32,    33,    31,    30,    72,   nil,    29,    64,   nil,
    40,    41,    38,    39,    34,    35,    36,    37,    32,    33,
    31,    30,    29,    86,   nil,    40,    41,    38,    39,    34,
    35,    36,    37,    32,    33,    31,    30,    29,   nil,   nil,
    40,    41,    38,    39,    34,    35,    36,    37,    32,    33,
    31,    30,    29,   nil,   nil,    40,    41,    38,    39,    34,
    35,    36,    37,    32,    33,    31,    30,    29,   nil,   nil,
    40,    41,    38,    39,    34,    35,    36,    37,    32,    33,
    31,    30,    29,   nil,   nil,    40,    41,    38,    39,    34,
    35,    36,    37,    32,    33,    31,    30,    29,   nil,   nil,
    40,    41,    38,    39,    34,    35,    36,    37,    32,    33,
    31,    30,    29,   nil,   nil,    40,    41,    38,    39,    34,
    35,    36,    37,    32,    33,    31,    30,    29,   nil,   nil,
    40,    41,    38,    39,    34,    35,    36,    37,    32,    33,
    31,    30,    29,   nil,   nil,    40,    41,    38,    39,    34,
    35,    36,    37,    32,    33,    31,    30,    29,   nil,   nil,
    40,    41,    38,    39,    34,    35,    36,    37,    32,    33,
    31,    29,   nil,   nil,    40,    41,    38,    39,    34,    35,
    36,    37,    29,   nil,   nil,    40,    41,    38,    39,    34,
    35,    36,    37,    29,   nil,   nil,    40,    41,    38,    39,
    29,   nil,   nil,    40,    41,    38,    39,    29,   nil,   nil,
    40,    41,    38,    39,    29,   nil,   nil,    40,    41,    38,
    39,    29,   nil,   nil,    40,    41 ]

racc_action_check = [
     0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    92,    46,    92,    92,    47,    92,    92,    92,
    92,    92,    92,    92,    51,    22,    81,    22,    81,    83,
     2,     0,    46,     0,     0,    62,    29,    76,    83,    27,
    51,    25,    92,    92,    92,    67,    92,    67,    67,    24,
    67,    67,    67,    67,    67,    67,    67,    72,    83,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,    61,
    23,    71,    61,    61,    88,    13,    67,    13,    13,    67,
    13,    13,    13,    13,    13,    13,    13,    89,    72,     1,
    72,    72,    75,    63,    75,    75,   nil,    75,    75,    75,
    75,    75,    75,    75,   nil,   nil,    13,    75,    86,    13,
    86,    86,   nil,    86,    86,    86,    86,    86,    86,    86,
   nil,   nil,    85,    75,    85,    85,    75,    85,    85,    85,
    85,    85,    85,    85,   nil,   nil,   nil,    85,    84,    86,
    84,    84,    86,    84,    84,    84,    84,    84,    84,    84,
   nil,   nil,    26,    85,    26,    26,    85,    26,    26,    26,
    26,    26,    26,    26,   nil,   nil,   nil,   nil,    84,    84,
    84,    65,    84,    65,    65,   nil,    65,    65,    65,    65,
    65,    65,    65,    26,   nil,    28,    26,    28,    28,   nil,
    28,    28,    28,    28,    28,    28,    28,   nil,   nil,   nil,
   nil,    65,    65,    65,    79,    65,    79,    79,   nil,    79,
    79,    79,    79,    79,    79,    79,    28,   nil,    30,    28,
    30,    30,   nil,    30,    30,    30,    30,    30,    30,    30,
   nil,   nil,   nil,   nil,    31,    79,    31,    31,    79,    31,
    31,    31,    31,    31,    31,    31,   nil,   nil,    32,    30,
    32,    32,    30,    32,    32,    32,    32,    32,    32,    32,
   nil,   nil,   nil,   nil,    33,    31,    33,    33,    31,    33,
    33,    33,    33,    33,    33,    33,   nil,   nil,    34,    32,
    34,    34,    32,    34,    34,    34,    34,    34,    34,    34,
   nil,   nil,   nil,   nil,    35,    33,    35,    35,    33,    35,
    35,    35,    35,    35,    35,    35,   nil,   nil,    36,    34,
    36,    36,    34,    36,    36,    36,    36,    36,    36,    36,
   nil,   nil,   nil,   nil,    37,    35,    37,    37,    35,    37,
    37,    37,    37,    37,    37,    37,   nil,   nil,    44,    36,
    44,    44,    36,    44,    44,    44,    44,    44,    44,    44,
   nil,   nil,   nil,   nil,    39,    37,    39,    39,    37,    39,
    39,    39,    39,    39,    39,    39,   nil,   nil,    40,    44,
    40,    40,    44,    40,    40,    40,    40,    40,    40,    40,
   nil,   nil,   nil,   nil,    41,    39,    41,    41,    39,    41,
    41,    41,    41,    41,    41,    41,   nil,   nil,    45,    40,
    45,    45,    40,    45,    45,    45,    45,    45,    45,    45,
   nil,   nil,   nil,   nil,    38,    41,    38,    38,    41,    38,
    38,    38,    38,    38,    38,    38,   nil,   nil,    43,    45,
    43,    43,    45,    43,    43,    43,    43,    43,    43,    43,
   nil,   nil,   nil,    43,   nil,    38,    53,   nil,    38,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    43,
    42,   nil,    43,    42,    42,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    48,   nil,    48,    42,   nil,
    48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
    48,    48,    78,    78,   nil,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    50,   nil,   nil,
    50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
    50,    50,    87,   nil,   nil,    87,    87,    87,    87,    87,
    87,    87,    87,    87,    87,    87,    87,     3,   nil,   nil,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,    69,   nil,   nil,    69,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    69,    69,    68,   nil,   nil,
    68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
    68,    68,    80,   nil,   nil,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    66,   nil,   nil,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    93,   nil,   nil,    93,    93,    93,    93,    93,
    93,    93,    93,    93,    93,    93,    93,    52,   nil,   nil,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    55,   nil,   nil,    55,    55,    55,    55,    55,    55,
    55,    55,    54,   nil,   nil,    54,    54,    54,    54,    54,
    54,    54,    54,    58,   nil,   nil,    58,    58,    58,    58,
    59,   nil,   nil,    59,    59,    59,    59,    57,   nil,   nil,
    57,    57,    57,    57,    56,   nil,   nil,    56,    56,    56,
    56,    60,   nil,   nil,    60,    60 ]

racc_action_pointer = [
    -2,    89,    -5,   521,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    73,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -6,    39,    37,    28,   150,    39,   183,    24,
   216,   232,   246,   262,   276,   292,   306,   322,   412,   352,
   366,   382,   444,   426,   336,   396,    -1,     2,   461,   nil,
   491,     7,   611,   430,   636,   625,   668,   661,   647,   654,
   675,    53,    19,    77,   nil,   169,   581,    43,   551,   536,
   nil,    59,    55,   nil,   nil,    90,     4,   nil,   476,   202,
   566,    -6,   nil,    23,   136,   120,   106,   506,    60,    75,
   nil,   nil,    10,   596,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -57,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -57,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -46,   -57,   -57,   -57,   -57,    -5,   -57,
   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
   -57,   -57,   -57,   -29,   -57,   -57,   -57,   -57,   -57,    97,
    -4,   -26,   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -15,   -57,   -30,   -57,   -47,   -48,
   -49,   -51,   -57,   -54,   -55,   -29,   -57,   -25,   -57,   -57,
   -31,   -57,   -52,   -57,   -57,   -29,   -57,   -32,   -57,   -57,
   -56,   -27,   -57,   -33,   -50,   -53,   -28 ]

racc_goto_table = [
     3,    28,     2,     1,    70,    73,    74,    81,   nil,   nil,
    65,   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,    50,   nil,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    84,   nil,    68,    69,    94,   nil,   nil,   nil,
   nil,   nil,    92,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    78,   nil,    80,   nil,   nil,
   nil,   nil,     3,   nil,    83,   nil,   nil,   nil,   nil,    87,
   nil,   nil,    28,   nil,    78,   nil,    93,   nil,   nil,   nil,
   nil,   nil,    78 ]

racc_goto_check = [
     3,     4,     2,     1,    14,    14,    14,    15,   nil,   nil,
    13,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,   nil,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,    13,   nil,     3,     3,    14,   nil,   nil,   nil,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,   nil,   nil,
   nil,   nil,     3,   nil,     2,   nil,   nil,   nil,   nil,     3,
   nil,   nil,     4,   nil,     3,   nil,     3,   nil,   nil,   nil,
   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     3,     2,     0,    -1,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -33,   -42,   -64 ]

racc_goto_default = [
   nil,   nil,   nil,    66,     4,     5,     6,     7,     8,     9,
    10,    11,    12,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 38, :_reduce_1,
  1, 38, :_reduce_2,
  1, 39, :_reduce_3,
  3, 39, :_reduce_4,
  2, 39, :_reduce_5,
  1, 39, :_reduce_6,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  3, 40, :_reduce_15,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 42, :_reduce_18,
  1, 42, :_reduce_19,
  1, 42, :_reduce_20,
  1, 42, :_reduce_21,
  1, 42, :_reduce_22,
  1, 42, :_reduce_23,
  1, 43, :_reduce_24,
  4, 43, :_reduce_25,
  3, 43, :_reduce_26,
  6, 43, :_reduce_27,
  7, 43, :_reduce_28,
  0, 50, :_reduce_29,
  1, 50, :_reduce_30,
  2, 50, :_reduce_31,
  3, 50, :_reduce_32,
  4, 50, :_reduce_33,
  3, 44, :_reduce_34,
  3, 44, :_reduce_35,
  3, 44, :_reduce_36,
  3, 44, :_reduce_37,
  3, 44, :_reduce_38,
  3, 44, :_reduce_39,
  3, 44, :_reduce_40,
  3, 44, :_reduce_41,
  3, 44, :_reduce_42,
  3, 44, :_reduce_43,
  3, 44, :_reduce_44,
  3, 44, :_reduce_45,
  1, 45, :_reduce_46,
  3, 46, :_reduce_47,
  3, 46, :_reduce_48,
  3, 47, :_reduce_49,
  6, 47, :_reduce_50,
  0, 52, :_reduce_51,
  1, 52, :_reduce_52,
  3, 52, :_reduce_53,
  3, 48, :_reduce_54,
  3, 49, :_reduce_55,
  3, 51, :_reduce_56 ]

racc_reduce_n = 57

racc_shift_n = 97

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :INDENT => 14,
  :DEDENT => 15,
  "." => 16,
  ":" => 17,
  "!" => 18,
  "*" => 19,
  "/" => 20,
  "+" => 21,
  "-" => 22,
  ">" => 23,
  ">=" => 24,
  "<" => 25,
  "<=" => 26,
  "==" => 27,
  "!=" => 28,
  "&&" => 29,
  "||" => 30,
  "=" => 31,
  "," => 32,
  "(" => 33,
  ")" => 34,
  ";" => 35,
  "@" => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\".\"",
  "\":\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"@\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_15(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_18(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_19(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_20(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_21(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_22(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_23(val, _values, result)
     result = SelfNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_24(val, _values, result)
     result = CallNode.new(nil, val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_25(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_26(val, _values, result)
     result = CallNode.new(val[0], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_27(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[2], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_30(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_31(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_32(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_33(val, _values, result)
     result = [val[0] << val[3]].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_41(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_43(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_44(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_45(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_46(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_47(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_48(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_49(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_50(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_51(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_52(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_53(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_54(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_55(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_56(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Coke
